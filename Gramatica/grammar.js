/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,17],$V1=[1,18],$V2=[1,15],$V3=[1,14],$V4=[1,16],$V5=[1,11],$V6=[1,12],$V7=[1,19],$V8=[1,20],$V9=[1,21],$Va=[1,22],$Vb=[5,15,16,17,22,27,29,33,34,36,37,38,39],$Vc=[1,50],$Vd=[1,49],$Ve=[1,51],$Vf=[1,52],$Vg=[1,53],$Vh=[1,54],$Vi=[1,55],$Vj=[1,56],$Vk=[1,57],$Vl=[1,42],$Vm=[1,43],$Vn=[1,44],$Vo=[1,45],$Vp=[1,46],$Vq=[1,47],$Vr=[1,48],$Vs=[8,35],$Vt=[1,65],$Vu=[1,66],$Vv=[1,67],$Vw=[1,68],$Vx=[1,69],$Vy=[1,70],$Vz=[1,71],$VA=[1,72],$VB=[1,73],$VC=[1,74],$VD=[1,75],$VE=[1,76],$VF=[1,77],$VG=[8,20,35,44,45,46,47,48,54,55,56,57,58,59,60,61],$VH=[8,20,35,44,45,46,47,54,55,56,57,58,59,60,61],$VI=[8,20,35,44,45,54,55,56,57,58,59,60,61],$VJ=[8,20,35,54,55,56,57,58,59,60,61];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"START":3,"LISTA_INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"PRINT":7,"semicolon":8,"DECLARACION":9,"ASIGNACION":10,"IF":11,"WHILE":12,"BREAK":13,"CONTINUE":14,"break":15,"continue":16,"if":17,"lparen":18,"EXPR":19,"rparen":20,"lllave":21,"rllave":22,"ELSE":23,"else":24,"SWITCH":25,"switch":26,"identifier":27,"LISTA_CASE":28,"while":29,"asign":30,"TIPO":31,"LISTA_ID":32,"print":33,"println":34,"coma":35,"int":36,"double":37,"boolean":38,"string":39,"PRIMITIVA":40,"OP_ARITMETICAS":41,"OP_RELACIONALES":42,"OP_LOGICAS":43,"plus":44,"minus":45,"multi":46,"div":47,"mod":48,"pow":49,"sqrt":50,"sin":51,"cos":52,"tan":53,"lt":54,"lte":55,"gt":56,"gte":57,"equal":58,"noequal":59,"and":60,"or":61,"not":62,"IntegerLiteral":63,"DoubleLiteral":64,"StringLiteral":65,"charliteral":66,"null":67,"true":68,"false":69,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"semicolon",15:"break",16:"continue",17:"if",18:"lparen",20:"rparen",21:"lllave",22:"rllave",24:"else",26:"switch",27:"identifier",28:"LISTA_CASE",29:"while",30:"asign",33:"print",34:"println",35:"coma",36:"int",37:"double",38:"boolean",39:"string",44:"plus",45:"minus",46:"multi",47:"div",48:"mod",49:"pow",50:"sqrt",51:"sin",52:"cos",53:"tan",54:"lt",55:"lte",56:"gt",57:"gte",58:"equal",59:"noequal",60:"and",61:"or",62:"not",63:"IntegerLiteral",64:"DoubleLiteral",65:"StringLiteral",66:"charliteral",67:"null",68:"true",69:"false"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[13,2],[14,2],[11,7],[11,8],[11,9],[11,5],[23,4],[25,7],[12,5],[12,7],[10,3],[9,2],[9,4],[7,4],[7,4],[32,3],[32,1],[31,1],[31,1],[31,1],[31,1],[19,1],[19,1],[19,1],[19,1],[41,3],[41,3],[41,3],[41,3],[41,3],[41,2],[41,6],[41,4],[41,4],[41,4],[41,4],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[43,3],[43,3],[43,2],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 this.$ = $$[$0-1]; return this.$; 
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 27:
 this.$ = [$$[$0]]; 
break;
case 4: case 5: case 6:
 this.$ = $$[$0-1]; 
break;
case 7: case 8: case 9: case 10:
 this.$ = $$[$0]; 
break;
case 11:
 this.$ = new Break( _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 12:
 this.$ = new Continue( _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 13:
 this.$ = new If($$[$0-4], $$[$0-1],[],[], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 14:
 this.$ = new If($$[$0-5], $$[$0-2], $$[$0],[], _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 15:
 this.$ = new If($$[$0-6], $$[$0-3],[],[$$[$0]], _$[$0-8].first_line, _$[$0-8].first_column); 
break;
case 16:
 this.$ = new If($$[$0-2], [$$[$0]],[],[], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 17:
this.$ = $$[$0-1];
break;
case 19:
 this.$ = new While($$[$0-2], [$$[$0]], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 20:
 this.$ = new While($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 21:
 this.$ = new Asignacion($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 22:
 this.$ = new Declaracion($$[$0], $$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 23:
 this.$ = new Declaracion([$$[$0-2]],$$[$0-3], _$[$0-3].first_line, _$[$0-3].first_column,$$[$0]); 
break;
case 24:
 this.$ = new Print($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 25:
 this.$ = new Print($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column,true); 
break;
case 26:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 28:
 this.$ = Tipo.INT; 
break;
case 29:
 this.$  = Tipo.DOUBLE; 
break;
case 30:
 this.$  = Tipo.BOOL; 
break;
case 31:
 this.$  = Tipo.STRING; 
break;
case 32: case 33: case 34: case 35:
 this.$ = $$[$0] 
break;
case 36:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.SUMA, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 37:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.RESTA, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 38:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.MULTIPLICACION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 39:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.DIVISION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 40:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.MODULO, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 41:
 this.$ = new Operacion($$[$0],$$[$0],Operador.MENOS_UNARIO, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 42:
 this.$ = new Operacion($$[$0-3],$$[$0-1],Operador.POW, _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 43:
 this.$ = new Operacion($$[$0-1],$$[$0-1],Operador.SQRT, _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 44:
 this.$ = new Operacion($$[$0-1],$$[$0-1],Operador.SENO, _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 45:
 this.$ = new Operacion($$[$0-1],$$[$0-1],Operador.COSENO, _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 46:
 this.$ = new Operacion($$[$0-1],$$[$0-1],Operador.TAN, _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 47:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.MENOR_QUE, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 48:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.MENOR_IGUAL_QUE, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 49:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.MAYOR_QUE, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 50:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.MAYOR_IGUAL_QUE, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 51:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.IGUAL_IGUAL, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 52:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.DIFERENTE_QUE, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 53:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.AND, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 54:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.OR, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 55:
 this.$ = new Operacion($$[$0],$$[$0],Operador.NOT, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 56:
 this.$ = new Primitivo(Number($$[$0]), _$[$0].first_line, _$[$0].first_column); 
break;
case 57:
 this.$ = new Primitivo(Number($$[$0]), _$[$0].first_line, _$[$0].first_first_column); 
break;
case 58:
 this.$ = new Primitivo($$[$0].replace(/['"]+/g, ''), _$[$0].first_line, _$[$0].first_column); 
break;
case 59:
 this.$ = new Primitivo($$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 60:
 this.$ = new Primitivo(null, _$[$0].first_line, _$[$0].first_column); 
break;
case 61:
 this.$ = new Primitivo(true, _$[$0].first_line, _$[$0].first_column); 
break;
case 62:
 this.$ = new Primitivo(false, _$[$0].first_line, _$[$0].first_column); 
break;
case 63:
 this.$ = new AccesoVariable($$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 64:
 this.$ = $$[$0-1] 
break;
}
},
table: [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:$V0,16:$V1,17:$V2,27:$V3,29:$V4,31:13,33:$V5,34:$V6,36:$V7,37:$V8,38:$V9,39:$Va},{1:[3]},{5:[1,23],6:24,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:$V0,16:$V1,17:$V2,27:$V3,29:$V4,31:13,33:$V5,34:$V6,36:$V7,37:$V8,38:$V9,39:$Va},o($Vb,[2,3]),{8:[1,25]},{8:[1,26]},{8:[1,27]},o($Vb,[2,7]),o($Vb,[2,8]),o($Vb,[2,9]),o($Vb,[2,10]),{18:[1,28]},{18:[1,29]},{27:[1,31],32:30},{30:[1,32]},{18:[1,33]},{18:[1,34]},{8:[1,35]},{8:[1,36]},{27:[2,28]},{27:[2,29]},{27:[2,30]},{27:[2,31]},{1:[2,1]},o($Vb,[2,2]),o($Vb,[2,4]),o($Vb,[2,5]),o($Vb,[2,6]),{18:$Vc,19:37,27:$Vd,40:38,41:39,42:40,43:41,45:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{18:$Vc,19:58,27:$Vd,40:38,41:39,42:40,43:41,45:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{8:[2,22],35:[1,59]},o($Vs,[2,27],{30:[1,60]}),{18:$Vc,19:61,27:$Vd,40:38,41:39,42:40,43:41,45:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{18:$Vc,19:62,27:$Vd,40:38,41:39,42:40,43:41,45:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{18:$Vc,19:63,27:$Vd,40:38,41:39,42:40,43:41,45:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},o($Vb,[2,11]),o($Vb,[2,12]),{20:[1,64],44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF},o($VG,[2,32]),o($VG,[2,33]),o($VG,[2,34]),o($VG,[2,35]),o($VG,[2,56]),o($VG,[2,57]),o($VG,[2,58]),o($VG,[2,59]),o($VG,[2,60]),o($VG,[2,61]),o($VG,[2,62]),o($VG,[2,63]),{18:$Vc,19:78,27:$Vd,40:38,41:39,42:40,43:41,45:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{18:$Vc,19:79,27:$Vd,40:38,41:39,42:40,43:41,45:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{18:[1,80]},{18:[1,81]},{18:[1,82]},{18:[1,83]},{18:[1,84]},{18:$Vc,19:85,27:$Vd,40:38,41:39,42:40,43:41,45:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{20:[1,86],44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF},{27:[1,87]},{18:$Vc,19:88,27:$Vd,40:38,41:39,42:40,43:41,45:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{8:[2,21],44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF},{20:[1,89],44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF},{20:[1,90],44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF},{8:[2,24]},{18:$Vc,19:91,27:$Vd,40:38,41:39,42:40,43:41,45:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{18:$Vc,19:92,27:$Vd,40:38,41:39,42:40,43:41,45:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{18:$Vc,19:93,27:$Vd,40:38,41:39,42:40,43:41,45:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{18:$Vc,19:94,27:$Vd,40:38,41:39,42:40,43:41,45:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{18:$Vc,19:95,27:$Vd,40:38,41:39,42:40,43:41,45:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{18:$Vc,19:96,27:$Vd,40:38,41:39,42:40,43:41,45:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{18:$Vc,19:97,27:$Vd,40:38,41:39,42:40,43:41,45:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{18:$Vc,19:98,27:$Vd,40:38,41:39,42:40,43:41,45:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{18:$Vc,19:99,27:$Vd,40:38,41:39,42:40,43:41,45:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{18:$Vc,19:100,27:$Vd,40:38,41:39,42:40,43:41,45:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{18:$Vc,19:101,27:$Vd,40:38,41:39,42:40,43:41,45:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{18:$Vc,19:102,27:$Vd,40:38,41:39,42:40,43:41,45:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{18:$Vc,19:103,27:$Vd,40:38,41:39,42:40,43:41,45:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{20:[1,104],44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF},o($VG,[2,41]),{18:$Vc,19:105,27:$Vd,40:38,41:39,42:40,43:41,45:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{18:$Vc,19:106,27:$Vd,40:38,41:39,42:40,43:41,45:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{18:$Vc,19:107,27:$Vd,40:38,41:39,42:40,43:41,45:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{18:$Vc,19:108,27:$Vd,40:38,41:39,42:40,43:41,45:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{18:$Vc,19:109,27:$Vd,40:38,41:39,42:40,43:41,45:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},o($VH,[2,55],{48:$Vx}),{8:[2,25]},o($Vs,[2,26]),{8:[2,23],44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF},{6:111,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:$V0,16:$V1,17:$V2,21:[1,110],27:$V3,29:$V4,31:13,33:$V5,34:$V6,36:$V7,37:$V8,38:$V9,39:$Va},{6:112,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:$V0,16:$V1,17:$V2,21:[1,113],27:$V3,29:$V4,31:13,33:$V5,34:$V6,36:$V7,37:$V8,38:$V9,39:$Va},o($VI,[2,36],{46:$Vv,47:$Vw,48:$Vx}),o($VI,[2,37],{46:$Vv,47:$Vw,48:$Vx}),o($VH,[2,38],{48:$Vx}),o($VH,[2,39],{48:$Vx}),o($VH,[2,40],{48:$Vx}),o($VJ,[2,47],{44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx}),o($VJ,[2,48],{44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx}),o($VJ,[2,49],{44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx}),o($VJ,[2,50],{44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx}),o($VJ,[2,51],{44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx}),o($VJ,[2,52],{44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx}),o([8,20,35,60,61],[2,53],{44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB,58:$VC,59:$VD}),o([8,20,35,61],[2,54],{44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB,58:$VC,59:$VD,60:$VE}),o($VG,[2,64]),{35:[1,114],44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF},{20:[1,115],44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF},{20:[1,116],44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF},{20:[1,117],44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF},{20:[1,118],44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF},{4:119,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:$V0,16:$V1,17:$V2,27:$V3,29:$V4,31:13,33:$V5,34:$V6,36:$V7,37:$V8,38:$V9,39:$Va},o($Vb,[2,16]),o($Vb,[2,19]),{4:120,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:$V0,16:$V1,17:$V2,27:$V3,29:$V4,31:13,33:$V5,34:$V6,36:$V7,37:$V8,38:$V9,39:$Va},{18:$Vc,19:121,27:$Vd,40:38,41:39,42:40,43:41,45:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},o($VG,[2,43]),o($VG,[2,44]),o($VG,[2,45]),o($VG,[2,46]),{6:24,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:$V0,16:$V1,17:$V2,22:[1,122],27:$V3,29:$V4,31:13,33:$V5,34:$V6,36:$V7,37:$V8,38:$V9,39:$Va},{6:24,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:$V0,16:$V1,17:$V2,22:[1,123],27:$V3,29:$V4,31:13,33:$V5,34:$V6,36:$V7,37:$V8,38:$V9,39:$Va},{20:[1,124],44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF},o($Vb,[2,13],{23:125,24:[1,126]}),o($Vb,[2,20]),o($VG,[2,42]),o($Vb,[2,14]),{11:127,17:$V2,21:[1,128]},o($Vb,[2,15]),{4:129,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:$V0,16:$V1,17:$V2,27:$V3,29:$V4,31:13,33:$V5,34:$V6,36:$V7,37:$V8,38:$V9,39:$Va},{6:24,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:$V0,16:$V1,17:$V2,22:[1,130],27:$V3,29:$V4,31:13,33:$V5,34:$V6,36:$V7,37:$V8,38:$V9,39:$Va},o($Vb,[2,17])],
defaultActions: {19:[2,28],20:[2,29],21:[2,30],22:[2,31],23:[2,1],64:[2,24],86:[2,25]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const {Print} = require("../Instrucciones/Primitivas/Print.js");
    const {If} = require("../Instrucciones/If.js");
    const {While} = require("../Instrucciones/While.js");
    const {Break} = require("../Instrucciones/Break.js");
    const {Continue} = require("../Instrucciones/Continue.js");
    const {Declaracion} = require("../Instrucciones/Declaracion.js");
    const {Asignacion} = require("../Instrucciones/Asignacion.js");
    const {Tipo} = require("../AST/Tipo.js");
    const {Primitivo} = require("../Expresiones/Primitivo.js");
    const {Operacion, Operador} = require("../Expresiones/Operacion.js");
    const {Objeto} = require("../Expresiones/Objeto.js");
    const {Atributo} = require("../Expresiones/Atributo.js");
    const {AccesoVariable} = require("../Expresiones/AccesoVariable.js");
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 67
break;
case 1:return 36
break;
case 2:return 37
break;
case 3:return 38
break;
case 4:return 'char'
break;
case 5:return 39
break;
case 6:return 'struct'
break;
case 7:return 49
break;
case 8:return 50
break;
case 9:return 51
break;
case 10:return 52
break;
case 11:return 53
break;
case 12:return 33
break;
case 13:return 34
break;
case 14:return 68
break;
case 15:return 69
break;
case 16:return 17
break;
case 17:return 24
break;
case 18:return 29
break;
case 19:return 26
break;
case 20:return 15
break;
case 21:return 16
break;
case 22:/* Comentario multiple */
break;
case 23:/* Comentario simple */
break;
case 24:/* Ignora espacio y tabs */
break;
case 25:/* Ignora espacio */
break;
case 26:return 64;
break;
case 27:return 63;
break;
case 28:return 27;
break;
case 29:return 65
break;
case 30:return 'CharLiteral'
break;
case 31:return 46
break;
case 32:return 47
break;
case 33:return 45
break;
case 34:return 44
break;
case 35:return 'pot'
break;
case 36:return 48
break;
case 37:return 18
break;
case 38:return 20
break;
case 39:return 58
break;
case 40:return 30
break;
case 41:return 59
break;
case 42:return 62
break;
case 43:return 55
break;
case 44:return 57
break;
case 45:return 54
break;
case 46:return 56
break;
case 47:return 60
break;
case 48:return 61
break;
case 49:return 8
break;
case 50:return 'dosp'
break;
case 51:return 'quest'
break;
case 52:return 21
break;
case 53:return 22
break;
case 54:return 'amp'
break;
case 55:return 35
break;
case 56:return 'doll'
break;
case 57:console.error('Error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', y columna: ' + yy_.yylloc.first_column);
break;
case 58:return 5
break;
case 59:return 'INVALID'
break;
}
},
rules: [/^(?:null\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:struct\b)/i,/^(?:pow\b)/i,/^(?:sqrt\b)/i,/^(?:sin\b)/i,/^(?:cos\b)/i,/^(?:tan\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:while\b)/i,/^(?:switch\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:[/][*][^]*[*][/])/i,/^(?:[/][/].*)/i,/^(?:[\t\n\r]+)/i,/^(?:\s+)/i,/^(?:(([0-9]+\.[0-9]*)|(\.[0-9]+)))/i,/^(?:[0-9]+)/i,/^(?:[a-zA-Z_][a-zA-Z0-9_ñÑ]*)/i,/^(?:("((\\([\'\"\\bfnrtv]))|([^\"\\]+))*"))/i,/^(?:('((\\([\'\"\\bfnrtv]))|([^\'\\]))'))/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:\()/i,/^(?:\))/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:;)/i,/^(?::)/i,/^(?:\?)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:&)/i,/^(?:,)/i,/^(?:\$)/i,/^(?:.)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"comment":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"inclusive":true},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}